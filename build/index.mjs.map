{"version":3,"file":"index.mjs","sourceRoot":"","sources":["../src/index.mts"],"names":[],"mappings":"AAAA,OAAO,EACN,OAAO,IAAI,QAAQ,EAAE,WAAW,GAEhC,MAAM,SAAS,CAAC;AACjB,aAAa;AACb,OAAO,EAAE,oCAAoC,EAAE,MAAM,0BAA0B,CAAC;AAEhF,qGAAqG;AAErG,SAAS,wBAAwB,CAAC,WAAgB,EAAE,YAAoB,EAAE,UAAoC;IAC7G,MAAM,MAAM,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;IACzC,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;QACjD,MAAM,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAsB,CAAC;QAC3D,MAAM,MAAM,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;QAChC,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACxC,KAAK,MAAM,SAAS,IAAI,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC;YAC5D,IAAI,WAAW,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,CAAC;gBACrC,MAAM,CAAC,SAAS,CAAC,CAAC,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,SAAS,CAAC,CAAC;YAC9D,CAAC;QACF,CAAC;IACF,CAAC;IACD,IAAI,UAAU,EAAE,CAAC;QAChB,oCAAoC,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;IAC1D,CAAC;IACD,OAAO,MAAM,CAAC;AACf,CAAC;AA0BD,MAAM,CAAC,KAAK,UAAU,OAAO,CAAqB,IAAiB;IAClE,MAAM,QAAQ,GAAiB;QAC9B,GAAG,IAAI;QACP,MAAM,EAAE,wBAAwB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC;KAC7E,CAAC;IACF,OAAO,QAAQ,CAAC,QAAQ,CAAiD,CAAC;AAC3E,CAAC;AAED,MAAM,UAAU,GAAG,CAAC,MAA4B,EAAE,GAAG,SAAgB;IACpE,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,CAAC,GAAG,WAAW,GAAG,KAAK,GAAG,KAAK,IAAI,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;AAChI,CAAC;AAED;;;;;;;GAOG","sourcesContent":["import {\n\tgraphql as _graphql, buildSchema, GraphQLObjectType, GraphQLArgs as _GraphQLArgs,\n\tExecutionResult,\n} from 'graphql';\n// @ts-ignore\nimport { addDirectiveResolveFunctionsToSchema } from './graphql-directives.mjs';\n\n// ##################################################################################################\n\nfunction buildSchemaWithResolvers(resolverMap: any, schemaString: string, directives?: GraphQLDirectiveHandler) {\n\tconst schema = buildSchema(schemaString);\n\tfor (const typeName of Object.keys(resolverMap)) {\n\t\tconst type = schema.getType(typeName) as GraphQLObjectType;\n\t\tconst fields = type.getFields();\n\t\tconst fieldsNames = Object.keys(fields);\n\t\tfor (const fieldName of Object.keys(resolverMap[typeName])) {\n\t\t\tif (fieldsNames.includes(fieldName)) {\n\t\t\t\tfields[fieldName].resolve = resolverMap[typeName][fieldName];\n\t\t\t}\n\t\t}\n\t}\n\tif (directives) {\n\t\taddDirectiveResolveFunctionsToSchema(schema, directives);\n\t}\n\treturn schema;\n}\n\ntype HandlerFunction = (obj: any, args: any, context: any, info: any) => unknown;\ntype AsyncHandlerFunction = (obj: any, args: any, context: any, info: any) => Promise<unknown>;\ntype DirectiveFunction = (resolve: ()=>any, obj: any, args: any, context: any, info: any, functionArgs: any) => unknown;\ntype AsyncDirectiveFunction = (resolve: ()=>any, obj: any, args: any, context: any, info: any, functionArgs: any) => Promise<unknown>;\n\n\nexport interface GraphQLHandler {\n\t[key: string]: {\n\t\t[functionName: string]: HandlerFunction | AsyncHandlerFunction,\n\t}\n}\n\nexport interface GraphQLDirectiveHandler {\n\t[functionName: string]: DirectiveFunction | AsyncDirectiveFunction,\n}\n\nexport interface GraphQLArgs extends Omit<_GraphQLArgs, 'schema' | 'fieldResolver' | 'typeResolver' > {\n\thandlers: GraphQLHandler,\n\tschema: string,\n\tdirectives?: GraphQLDirectiveHandler,\n}\n\nexport async function graphql(args: GraphQLArgs): Promise<ExecutionResult>;\nexport async function graphql<TData>(args: GraphQLArgs): Promise<ExecutionResult<TData>>;\nexport async function graphql<TData, TExtensions>(args: GraphQLArgs): Promise<ExecutionResult<TData, TExtensions>> {\n\tconst realArgs: _GraphQLArgs = {\n\t\t...args,\n\t\tschema: buildSchemaWithResolvers(args.handlers, args.schema, args.directives),\n\t};\n\treturn _graphql(realArgs) as Promise<ExecutionResult<TData, TExtensions>>;\n}\n\nexport function gql(chunks: TemplateStringsArray, ...variables: any[]): string {\n\treturn chunks.reduce((accumulator, chunk, index) => `${accumulator}${chunk}${index in variables ? variables[index] : ''}`, '');\n}\n\n/**\n resolvers\nhuman(obj, args, context, info)\nobj The previous object, which for a field on the root Query type is often not used.\nargs The arguments provided to the field in the GraphQL query.\ncontext A value which is provided to every resolver and holds important contextual information like the currently logged in user, or access to a database.\ninfo A value which holds field-specific information relevant to the current query as well as the schema details, also refer to type GraphQLResolveInfo for more details.\n */\n"]}